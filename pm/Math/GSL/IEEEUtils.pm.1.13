# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Math::GSL::IEEEUtils;
use base qw(Exporter);
use base qw(DynaLoader);
package Math::GSL::IEEEUtilsc;
bootstrap Math::GSL::IEEEUtils;
package Math::GSL::IEEEUtils;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Math::GSL::IEEEUtils;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Math::GSL::IEEEUtils;

*gsl_ieee_printf_float = *Math::GSL::IEEEUtilsc::gsl_ieee_printf_float;
*gsl_ieee_printf_double = *Math::GSL::IEEEUtilsc::gsl_ieee_printf_double;
*gsl_ieee_fprintf_float = *Math::GSL::IEEEUtilsc::gsl_ieee_fprintf_float;
*gsl_ieee_fprintf_double = *Math::GSL::IEEEUtilsc::gsl_ieee_fprintf_double;
*gsl_ieee_float_to_rep = *Math::GSL::IEEEUtilsc::gsl_ieee_float_to_rep;
*gsl_ieee_double_to_rep = *Math::GSL::IEEEUtilsc::gsl_ieee_double_to_rep;
*gsl_ieee_env_setup = *Math::GSL::IEEEUtilsc::gsl_ieee_env_setup;
*gsl_ieee_read_mode_string = *Math::GSL::IEEEUtilsc::gsl_ieee_read_mode_string;
*gsl_ieee_set_mode = *Math::GSL::IEEEUtilsc::gsl_ieee_set_mode;

############# Class : Math::GSL::IEEEUtils::gsl_ieee_float_rep ##############

package Math::GSL::IEEEUtils::gsl_ieee_float_rep;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Math::GSL::IEEEUtils );
%OWNER = ();
%ITERATORS = ();
*swig_sign_get = *Math::GSL::IEEEUtilsc::gsl_ieee_float_rep_sign_get;
*swig_sign_set = *Math::GSL::IEEEUtilsc::gsl_ieee_float_rep_sign_set;
*swig_mantissa_get = *Math::GSL::IEEEUtilsc::gsl_ieee_float_rep_mantissa_get;
*swig_mantissa_set = *Math::GSL::IEEEUtilsc::gsl_ieee_float_rep_mantissa_set;
*swig_exponent_get = *Math::GSL::IEEEUtilsc::gsl_ieee_float_rep_exponent_get;
*swig_exponent_set = *Math::GSL::IEEEUtilsc::gsl_ieee_float_rep_exponent_set;
*swig_type_get = *Math::GSL::IEEEUtilsc::gsl_ieee_float_rep_type_get;
*swig_type_set = *Math::GSL::IEEEUtilsc::gsl_ieee_float_rep_type_set;
sub new {
    my $pkg = shift;
    my $self = Math::GSL::IEEEUtilsc::new_gsl_ieee_float_rep(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Math::GSL::IEEEUtilsc::delete_gsl_ieee_float_rep($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Math::GSL::IEEEUtils::gsl_ieee_double_rep ##############

package Math::GSL::IEEEUtils::gsl_ieee_double_rep;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Math::GSL::IEEEUtils );
%OWNER = ();
%ITERATORS = ();
*swig_sign_get = *Math::GSL::IEEEUtilsc::gsl_ieee_double_rep_sign_get;
*swig_sign_set = *Math::GSL::IEEEUtilsc::gsl_ieee_double_rep_sign_set;
*swig_mantissa_get = *Math::GSL::IEEEUtilsc::gsl_ieee_double_rep_mantissa_get;
*swig_mantissa_set = *Math::GSL::IEEEUtilsc::gsl_ieee_double_rep_mantissa_set;
*swig_exponent_get = *Math::GSL::IEEEUtilsc::gsl_ieee_double_rep_exponent_get;
*swig_exponent_set = *Math::GSL::IEEEUtilsc::gsl_ieee_double_rep_exponent_set;
*swig_type_get = *Math::GSL::IEEEUtilsc::gsl_ieee_double_rep_type_get;
*swig_type_set = *Math::GSL::IEEEUtilsc::gsl_ieee_double_rep_type_set;
sub new {
    my $pkg = shift;
    my $self = Math::GSL::IEEEUtilsc::new_gsl_ieee_double_rep(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Math::GSL::IEEEUtilsc::delete_gsl_ieee_double_rep($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Math::GSL::IEEEUtils;

*GSL_MAJOR_VERSION = *Math::GSL::IEEEUtilsc::GSL_MAJOR_VERSION;
*GSL_MINOR_VERSION = *Math::GSL::IEEEUtilsc::GSL_MINOR_VERSION;
*GSL_POSZERO = *Math::GSL::IEEEUtilsc::GSL_POSZERO;
*GSL_NEGZERO = *Math::GSL::IEEEUtilsc::GSL_NEGZERO;
*GSL_IEEE_TYPE_NAN = *Math::GSL::IEEEUtilsc::GSL_IEEE_TYPE_NAN;
*GSL_IEEE_TYPE_INF = *Math::GSL::IEEEUtilsc::GSL_IEEE_TYPE_INF;
*GSL_IEEE_TYPE_NORMAL = *Math::GSL::IEEEUtilsc::GSL_IEEE_TYPE_NORMAL;
*GSL_IEEE_TYPE_DENORMAL = *Math::GSL::IEEEUtilsc::GSL_IEEE_TYPE_DENORMAL;
*GSL_IEEE_TYPE_ZERO = *Math::GSL::IEEEUtilsc::GSL_IEEE_TYPE_ZERO;
*GSL_IEEE_SINGLE_PRECISION = *Math::GSL::IEEEUtilsc::GSL_IEEE_SINGLE_PRECISION;
*GSL_IEEE_DOUBLE_PRECISION = *Math::GSL::IEEEUtilsc::GSL_IEEE_DOUBLE_PRECISION;
*GSL_IEEE_EXTENDED_PRECISION = *Math::GSL::IEEEUtilsc::GSL_IEEE_EXTENDED_PRECISION;
*GSL_IEEE_ROUND_TO_NEAREST = *Math::GSL::IEEEUtilsc::GSL_IEEE_ROUND_TO_NEAREST;
*GSL_IEEE_ROUND_DOWN = *Math::GSL::IEEEUtilsc::GSL_IEEE_ROUND_DOWN;
*GSL_IEEE_ROUND_UP = *Math::GSL::IEEEUtilsc::GSL_IEEE_ROUND_UP;
*GSL_IEEE_ROUND_TO_ZERO = *Math::GSL::IEEEUtilsc::GSL_IEEE_ROUND_TO_ZERO;
*GSL_IEEE_MASK_INVALID = *Math::GSL::IEEEUtilsc::GSL_IEEE_MASK_INVALID;
*GSL_IEEE_MASK_DENORMALIZED = *Math::GSL::IEEEUtilsc::GSL_IEEE_MASK_DENORMALIZED;
*GSL_IEEE_MASK_DIVISION_BY_ZERO = *Math::GSL::IEEEUtilsc::GSL_IEEE_MASK_DIVISION_BY_ZERO;
*GSL_IEEE_MASK_OVERFLOW = *Math::GSL::IEEEUtilsc::GSL_IEEE_MASK_OVERFLOW;
*GSL_IEEE_MASK_UNDERFLOW = *Math::GSL::IEEEUtilsc::GSL_IEEE_MASK_UNDERFLOW;
*GSL_IEEE_MASK_ALL = *Math::GSL::IEEEUtilsc::GSL_IEEE_MASK_ALL;
*GSL_IEEE_TRAP_INEXACT = *Math::GSL::IEEEUtilsc::GSL_IEEE_TRAP_INEXACT;

@EXPORT_OK = qw/
               gsl_ieee_printf_float 
               gsl_ieee_printf_double 
               gsl_ieee_fprintf_float 
               gsl_ieee_fprintf_double 
               gsl_ieee_float_to_rep 
               gsl_ieee_double_to_rep 
               gsl_ieee_env_setup 
               gsl_ieee_read_mode_string 
               gsl_ieee_set_mode 
               $GSL_IEEE_TYPE_NAN 
               $GSL_IEEE_TYPE_INF 
               $GSL_IEEE_TYPE_NORMAL 
               $GSL_IEEE_TYPE_DENORMAL 
               $GSL_IEEE_TYPE_ZERO 
               $GSL_IEEE_SINGLE_PRECISION 
               $GSL_IEEE_DOUBLE_PRECISION 
               $GSL_IEEE_EXTENDED_PRECISION 
               $GSL_IEEE_ROUND_TO_NEAREST 
               $GSL_IEEE_ROUND_DOWN 
               $GSL_IEEE_ROUND_UP 
               $GSL_IEEE_ROUND_TO_ZERO 
               $GSL_IEEE_MASK_INVALID 
               $GSL_IEEE_MASK_DENORMALIZED 
               $GSL_IEEE_MASK_DIVISION_BY_ZERO 
               $GSL_IEEE_MASK_OVERFLOW 
               $GSL_IEEE_MASK_UNDERFLOW 
               $GSL_IEEE_MASK_ALL 
               $GSL_IEEE_TRAP_INEXACT 
             /;
%EXPORT_TAGS = ( all => [ @EXPORT_OK ] );
1;
