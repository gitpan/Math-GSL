# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Math::GSL::Siman;
use base qw(Exporter);
use base qw(DynaLoader);
package Math::GSL::Simanc;
bootstrap Math::GSL::Siman;
package Math::GSL::Siman;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Math::GSL::Siman;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Math::GSL::Siman;

*gsl_siman_solve = *Math::GSL::Simanc::gsl_siman_solve;
*gsl_siman_solve_many = *Math::GSL::Simanc::gsl_siman_solve_many;

############# Class : Math::GSL::Siman::gsl_siman_params_t ##############

package Math::GSL::Siman::gsl_siman_params_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Math::GSL::Siman );
%OWNER = ();
%ITERATORS = ();
*swig_n_tries_get = *Math::GSL::Simanc::gsl_siman_params_t_n_tries_get;
*swig_n_tries_set = *Math::GSL::Simanc::gsl_siman_params_t_n_tries_set;
*swig_iters_fixed_T_get = *Math::GSL::Simanc::gsl_siman_params_t_iters_fixed_T_get;
*swig_iters_fixed_T_set = *Math::GSL::Simanc::gsl_siman_params_t_iters_fixed_T_set;
*swig_step_size_get = *Math::GSL::Simanc::gsl_siman_params_t_step_size_get;
*swig_step_size_set = *Math::GSL::Simanc::gsl_siman_params_t_step_size_set;
*swig_k_get = *Math::GSL::Simanc::gsl_siman_params_t_k_get;
*swig_k_set = *Math::GSL::Simanc::gsl_siman_params_t_k_set;
*swig_t_initial_get = *Math::GSL::Simanc::gsl_siman_params_t_t_initial_get;
*swig_t_initial_set = *Math::GSL::Simanc::gsl_siman_params_t_t_initial_set;
*swig_mu_t_get = *Math::GSL::Simanc::gsl_siman_params_t_mu_t_get;
*swig_mu_t_set = *Math::GSL::Simanc::gsl_siman_params_t_mu_t_set;
*swig_t_min_get = *Math::GSL::Simanc::gsl_siman_params_t_t_min_get;
*swig_t_min_set = *Math::GSL::Simanc::gsl_siman_params_t_t_min_set;
sub new {
    my $pkg = shift;
    my $self = Math::GSL::Simanc::new_gsl_siman_params_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Math::GSL::Simanc::delete_gsl_siman_params_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Math::GSL::Siman;

*GSL_MAJOR_VERSION = *Math::GSL::Simanc::GSL_MAJOR_VERSION;
*GSL_MINOR_VERSION = *Math::GSL::Simanc::GSL_MINOR_VERSION;
*GSL_POSZERO = *Math::GSL::Simanc::GSL_POSZERO;
*GSL_NEGZERO = *Math::GSL::Simanc::GSL_NEGZERO;

@EXPORT_OK = qw/
               gsl_siman_solve 
               gsl_siman_solve_many 
             /;
%EXPORT_TAGS = ( all => [ @EXPORT_OK ] );

__END__

=head1 NAME

Math::GSL::Siman - Simulated Annealing

=head1 SYNOPSIS

This module is not yet implemented. Patches Welcome!

use Math::GSL::Siman qw /:all/;

=head1 DESCRIPTION

Here is a list of all the functions in this module :

=over

=item * C<gsl_siman_solve >

=item * C<gsl_siman_solve_many >

=back


For more informations on the functions, we refer you to the GSL offcial
documentation: L<http://www.gnu.org/software/gsl/manual/html_node/>

 


=head1 AUTHORS

Jonathan "Duke" Leto <jonathan@leto.net> and Thierry Moisan <thierry.moisan@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2008-2011 Jonathan "Duke" Leto and Thierry Moisan

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut



1;
