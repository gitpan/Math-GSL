# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

package Math::GSL::Combination;
use base qw(Exporter);
use base qw(DynaLoader);
package Math::GSL::Combinationc;
bootstrap Math::GSL::Combination;
package Math::GSL::Combination;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Math::GSL::Combination;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Math::GSL::Combination;

*gsl_combination_alloc = *Math::GSL::Combinationc::gsl_combination_alloc;
*gsl_combination_calloc = *Math::GSL::Combinationc::gsl_combination_calloc;
*gsl_combination_init_first = *Math::GSL::Combinationc::gsl_combination_init_first;
*gsl_combination_init_last = *Math::GSL::Combinationc::gsl_combination_init_last;
*gsl_combination_free = *Math::GSL::Combinationc::gsl_combination_free;
*gsl_combination_memcpy = *Math::GSL::Combinationc::gsl_combination_memcpy;
*gsl_combination_fread = *Math::GSL::Combinationc::gsl_combination_fread;
*gsl_combination_fwrite = *Math::GSL::Combinationc::gsl_combination_fwrite;
*gsl_combination_fscanf = *Math::GSL::Combinationc::gsl_combination_fscanf;
*gsl_combination_fprintf = *Math::GSL::Combinationc::gsl_combination_fprintf;
*gsl_combination_n = *Math::GSL::Combinationc::gsl_combination_n;
*gsl_combination_k = *Math::GSL::Combinationc::gsl_combination_k;
*gsl_combination_data = *Math::GSL::Combinationc::gsl_combination_data;
*gsl_combination_get = *Math::GSL::Combinationc::gsl_combination_get;
*gsl_combination_valid = *Math::GSL::Combinationc::gsl_combination_valid;
*gsl_combination_next = *Math::GSL::Combinationc::gsl_combination_next;
*gsl_combination_prev = *Math::GSL::Combinationc::gsl_combination_prev;

############# Class : Math::GSL::Combination::gsl_combination_struct ##############

package Math::GSL::Combination::gsl_combination_struct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Math::GSL::Combination );
%OWNER = ();
%ITERATORS = ();
*swig_n_get = *Math::GSL::Combinationc::gsl_combination_struct_n_get;
*swig_n_set = *Math::GSL::Combinationc::gsl_combination_struct_n_set;
*swig_k_get = *Math::GSL::Combinationc::gsl_combination_struct_k_get;
*swig_k_set = *Math::GSL::Combinationc::gsl_combination_struct_k_set;
*swig_data_get = *Math::GSL::Combinationc::gsl_combination_struct_data_get;
*swig_data_set = *Math::GSL::Combinationc::gsl_combination_struct_data_set;
sub new {
    my $pkg = shift;
    my $self = Math::GSL::Combinationc::new_gsl_combination_struct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Math::GSL::Combinationc::delete_gsl_combination_struct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Math::GSL::Combination;


@EXPORT_OK = qw/
               gsl_combination_alloc 
               gsl_combination_calloc 
               gsl_combination_init_first 
               gsl_combination_init_last 
               gsl_combination_free 
               gsl_combination_memcpy 
               gsl_combination_fread 
               gsl_combination_fwrite 
               gsl_combination_fscanf 
               gsl_combination_fprintf 
               gsl_combination_n 
               gsl_combination_k 
               gsl_combination_data 
               gsl_combination_get 
               gsl_combination_valid 
               gsl_combination_next 
               gsl_combination_prev 
             /;
%EXPORT_TAGS = ( all => [ @EXPORT_OK ] );
1;
