# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

package Math::GSL::Deriv;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
package Math::GSL::Derivc;
bootstrap Math::GSL::Deriv;
package Math::GSL::Deriv;
@EXPORT = qw( );

# ---------- BASE METHODS -------------

package Math::GSL::Deriv;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Math::GSL::Deriv;

*gsl_max = *Math::GSL::Derivc::gsl_max;
*gsl_min = *Math::GSL::Derivc::gsl_min;
*gsl_deriv_central = *Math::GSL::Derivc::gsl_deriv_central;
*gsl_deriv_backward = *Math::GSL::Derivc::gsl_deriv_backward;
*gsl_deriv_forward = *Math::GSL::Derivc::gsl_deriv_forward;

############# Class : Math::GSL::Deriv::gsl_function_struct ##############

package Math::GSL::Deriv::gsl_function_struct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Math::GSL::Deriv );
%OWNER = ();
%ITERATORS = ();
*swig_function_get = *Math::GSL::Derivc::gsl_function_struct_function_get;
*swig_function_set = *Math::GSL::Derivc::gsl_function_struct_function_set;
*swig_params_get = *Math::GSL::Derivc::gsl_function_struct_params_get;
*swig_params_set = *Math::GSL::Derivc::gsl_function_struct_params_set;
sub new {
    my $pkg = shift;
    my $self = Math::GSL::Derivc::new_gsl_function_struct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Math::GSL::Derivc::delete_gsl_function_struct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Math::GSL::Deriv::gsl_function_fdf_struct ##############

package Math::GSL::Deriv::gsl_function_fdf_struct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Math::GSL::Deriv );
%OWNER = ();
%ITERATORS = ();
*swig_f_get = *Math::GSL::Derivc::gsl_function_fdf_struct_f_get;
*swig_f_set = *Math::GSL::Derivc::gsl_function_fdf_struct_f_set;
*swig_df_get = *Math::GSL::Derivc::gsl_function_fdf_struct_df_get;
*swig_df_set = *Math::GSL::Derivc::gsl_function_fdf_struct_df_set;
*swig_fdf_get = *Math::GSL::Derivc::gsl_function_fdf_struct_fdf_get;
*swig_fdf_set = *Math::GSL::Derivc::gsl_function_fdf_struct_fdf_set;
*swig_params_get = *Math::GSL::Derivc::gsl_function_fdf_struct_params_get;
*swig_params_set = *Math::GSL::Derivc::gsl_function_fdf_struct_params_set;
sub new {
    my $pkg = shift;
    my $self = Math::GSL::Derivc::new_gsl_function_fdf_struct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Math::GSL::Derivc::delete_gsl_function_fdf_struct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Math::GSL::Deriv::gsl_function_vec_struct ##############

package Math::GSL::Deriv::gsl_function_vec_struct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Math::GSL::Deriv );
%OWNER = ();
%ITERATORS = ();
*swig_function_get = *Math::GSL::Derivc::gsl_function_vec_struct_function_get;
*swig_function_set = *Math::GSL::Derivc::gsl_function_vec_struct_function_set;
*swig_params_get = *Math::GSL::Derivc::gsl_function_vec_struct_params_get;
*swig_params_set = *Math::GSL::Derivc::gsl_function_vec_struct_params_set;
sub new {
    my $pkg = shift;
    my $self = Math::GSL::Derivc::new_gsl_function_vec_struct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Math::GSL::Derivc::delete_gsl_function_vec_struct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Math::GSL::Deriv;

*M_E = *Math::GSL::Derivc::M_E;
*M_LOG2E = *Math::GSL::Derivc::M_LOG2E;
*M_LOG10E = *Math::GSL::Derivc::M_LOG10E;
*M_SQRT2 = *Math::GSL::Derivc::M_SQRT2;
*M_SQRT1_2 = *Math::GSL::Derivc::M_SQRT1_2;
*M_SQRT3 = *Math::GSL::Derivc::M_SQRT3;
*M_PI = *Math::GSL::Derivc::M_PI;
*M_PI_2 = *Math::GSL::Derivc::M_PI_2;
*M_PI_4 = *Math::GSL::Derivc::M_PI_4;
*M_SQRTPI = *Math::GSL::Derivc::M_SQRTPI;
*M_2_SQRTPI = *Math::GSL::Derivc::M_2_SQRTPI;
*M_1_PI = *Math::GSL::Derivc::M_1_PI;
*M_2_PI = *Math::GSL::Derivc::M_2_PI;
*M_LN10 = *Math::GSL::Derivc::M_LN10;
*M_LN2 = *Math::GSL::Derivc::M_LN2;
*M_LNPI = *Math::GSL::Derivc::M_LNPI;
*M_EULER = *Math::GSL::Derivc::M_EULER;

@EXPORT_OK = qw/
               gsl_deriv_central 
               gsl_deriv_backward 
               gsl_deriv_forward 
             /;
%EXPORT_TAGS = ( all => [ @EXPORT_OK ] );

__END__

=head1 NAME

Math::GSL::Deriv - Functions to compute numerical derivatives by finite differencing

=head1 SYNOPSIS

This module is not yet implemented. Patches Welcome!

use Math::GSL::Deriv qw /:all/;

=head1 DESCRIPTION

Here is a list of all the functions in this module :

=over 

=item * C<gsl_deriv_central> 

=item * C<gsl_deriv_backward> 

=item * C<gsl_deriv_forward> 

=back

For more informations on the functions, we refer you to the GSL offcial
documentation: L<http://www.gnu.org/software/gsl/manual/html_node/>

Tip : search on google: site:http://www.gnu.org/software/gsl/manual/html_node/ name_of_the_function_you_want


=head1 AUTHORS

Jonathan Leto <jonathan@leto.net> and Thierry Moisan <thierry.moisan@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2008 Jonathan Leto and Thierry Moisan

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

1;
