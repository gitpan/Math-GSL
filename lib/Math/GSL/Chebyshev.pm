# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

package Math::GSL::Chebyshev;
use base qw(Exporter);
use base qw(DynaLoader);
package Math::GSL::Chebyshevc;
bootstrap Math::GSL::Chebyshev;
package Math::GSL::Chebyshev;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Math::GSL::Chebyshev;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Math::GSL::Chebyshev;

*gsl_cheb_alloc = *Math::GSL::Chebyshevc::gsl_cheb_alloc;
*gsl_cheb_free = *Math::GSL::Chebyshevc::gsl_cheb_free;
*gsl_cheb_init = *Math::GSL::Chebyshevc::gsl_cheb_init;
*gsl_cheb_eval = *Math::GSL::Chebyshevc::gsl_cheb_eval;
*gsl_cheb_eval_err = *Math::GSL::Chebyshevc::gsl_cheb_eval_err;
*gsl_cheb_eval_n = *Math::GSL::Chebyshevc::gsl_cheb_eval_n;
*gsl_cheb_eval_n_err = *Math::GSL::Chebyshevc::gsl_cheb_eval_n_err;
*gsl_cheb_eval_mode = *Math::GSL::Chebyshevc::gsl_cheb_eval_mode;
*gsl_cheb_eval_mode_e = *Math::GSL::Chebyshevc::gsl_cheb_eval_mode_e;
*gsl_cheb_calc_deriv = *Math::GSL::Chebyshevc::gsl_cheb_calc_deriv;
*gsl_cheb_calc_integ = *Math::GSL::Chebyshevc::gsl_cheb_calc_integ;

############# Class : Math::GSL::Chebyshev::gsl_cheb_series_struct ##############

package Math::GSL::Chebyshev::gsl_cheb_series_struct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Math::GSL::Chebyshev );
%OWNER = ();
%ITERATORS = ();
*swig_c_get = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_c_get;
*swig_c_set = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_c_set;
*swig_order_get = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_order_get;
*swig_order_set = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_order_set;
*swig_a_get = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_a_get;
*swig_a_set = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_a_set;
*swig_b_get = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_b_get;
*swig_b_set = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_b_set;
*swig_order_sp_get = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_order_sp_get;
*swig_order_sp_set = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_order_sp_set;
*swig_f_get = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_f_get;
*swig_f_set = *Math::GSL::Chebyshevc::gsl_cheb_series_struct_f_set;
sub new {
    my $pkg = shift;
    my $self = Math::GSL::Chebyshevc::new_gsl_cheb_series_struct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Math::GSL::Chebyshevc::delete_gsl_cheb_series_struct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Math::GSL::Chebyshev;


@EXPORT_OK = qw/
               gsl_cheb_alloc 
               gsl_cheb_free 
               gsl_cheb_init 
               gsl_cheb_eval 
               gsl_cheb_eval_err 
               gsl_cheb_eval_n 
               gsl_cheb_eval_n_err 
               gsl_cheb_eval_mode 
               gsl_cheb_eval_mode_e 
               gsl_cheb_calc_deriv 
               gsl_cheb_calc_integ 
             /;
%EXPORT_TAGS = ( all => [ @EXPORT_OK ] );
1;
